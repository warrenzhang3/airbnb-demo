<!-- app/views/bookings/new.html.erb -->
<%= form_with(model: [@dog, @booking], local: true, html: { class: 'container mt-4' }) do |form| %>
  <% if @booking.errors.any? %>
    <div class="alert alert-danger">
      <h4><%= pluralize(@booking.errors.count, "error") %> prohibited this booking from being saved:</h4>
      <ul>
        <% @booking.errors.full_messages.each do |message| %>
          <li><%= message %></li>
        <% end %>
      </ul>
    </div>
  <% end %>

  <div class="mb-3">
    <%= form.label :dog_name, "Dog Name", class: 'form-label' %>
    <%= form.text_field :dog_name, class: 'form-control', value: params[:dog_name], readonly: true %>
  </div>

  <div class="mb-3">
    <%= form.label :start_date, class: 'form-label' %>
    <%= form.date_field :start_date, class: 'form-control', id: 'start_date' %>
  </div>

  <div class="mb-3">
    <%= form.label :end_date, class: 'form-label' %>
    <%= form.date_field :end_date, class: 'form-control', id: 'end_date' %>
  </div>

  <div class="mb-3">
    <%= form.label :price_per_day, "Price per Day (CAD)", class: 'form-label' %>
    <%= form.text_field :price_per_day, class: 'form-control', value: params[:price], readonly: true %>
  </div>

  <div class="mb-3">
    <%= form.label :total_price, class: 'form-label' %>
    <div class="input-group">
      <div class="input-group-prepend">
        <span class="input-group-text">CAD</span>
      </div>
      <%= form.text_field :total_price, class: 'form-control', id: 'total_price', readonly: true %>
    </div>
  </div>

  <div class="mb-3">
    <%= form.submit "Create Booking", class: 'btn btn-primary' %>
  </div>
<% end %>

<!-- JavaScript to Calculate Total Price -->
<script>
  document.addEventListener("DOMContentLoaded", function() {
    const startDateInput = document.getElementById('start_date');
    const endDateInput = document.getElementById('end_date');
    const totalPriceInput = document.getElementById('total_price');
    const pricePerDay = parseFloat("<%= params[:price] %>");  // Fetch the price per day from the params

    function calculateTotalPrice() {
      const startDate = new Date(startDateInput.value);
      const endDate = new Date(endDateInput.value);

      if (startDate && endDate && !isNaN(startDate) && !isNaN(endDate) && startDate <= endDate) {
        const diffTime = Math.abs(endDate - startDate);
        const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24)) + 1;  // Include the start day
        const totalPrice = diffDays * pricePerDay;
        totalPriceInput.value = totalPrice.toFixed(2);
      } else {
        totalPriceInput.value = '';
      }
    }

    startDateInput.addEventListener('change', calculateTotalPrice);
    endDateInput.addEventListener('change', calculateTotalPrice);
  });
</script>
